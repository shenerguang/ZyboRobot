/*
 * LeafClassifier.cpp
 *
 *  Created on: Jul 24, 2012
 *      Author: shenyunjun
 */

#include "LeafClassifier.h"

#include "cxcore.h"
#include "highgui.h"
#include "opencv2/highgui/highgui.hpp"
#include "opencv2/imgproc/imgproc.hpp"
#include "math.h"
#include "opencv2/opencv.hpp"

using namespace cv;

LeafClassifier::LeafClassifier() {
	// TODO Auto-generated constructor stub

	//leafData
	leafData = (cv::Mat_<double>(32,11)<<7.212501,0.265027,0.721927,1.913261,4.230096,0.606848,0.927863,0.944621,0.871940,0.731707,0.000000,
4.872727,0.360120,0.676900,1.826795,4.306798,0.401754,0.969372,0.940960,0.817510,0.846909,0.000000,
4.145078,0.431183,0.735670,1.832273,4.413979,0.337075,0.969487,0.928976,0.962777,0.934460,0.000000,
3.868421,0.425962,0.645269,1.762661,4.318285,0.327941,0.970009,0.948136,0.936765,0.720070,0.000000,
3.804044,0.389265,0.627345,1.827055,4.467111,0.319512,0.911781,0.935475,0.702580,0.567769,0.000000,
3.613139,0.449536,0.639025,1.741515,4.326236,0.304168,0.970169,0.952262,0.744702,0.964773,0.000000,
3.135294,0.516916,0.659684,1.714730,4.437671,0.277014,0.973843,0.954285,0.860566,0.721294,0.000000,
2.796512,0.484338,0.602270,1.741204,4.611967,0.258688,0.935749,0.915335,0.974754,0.807081,0.000000,
2.699187,0.571978,0.664732,1.697262,4.510989,0.232748,0.969724,0.948042,0.933913,0.783766,0.000000,
2.666666,0.612368,0.709397,1.699246,4.588139,0.238731,0.983975,0.952943,0.913381,0.796269,0.000000,
2.535338,0.620851,0.687995,1.680702,4.550445,0.229145,0.975596,0.949665,0.964140,0.945441,0.000000,
2.370830,0.555188,0.655900,1.760017,4.840895,0.218392,0.946767,0.921912,0.998694,0.582730,0.000000,
2.213735,0.671946,0.697397,1.671977,4.712787,0.201769,0.975887,0.942734,0.916438,0.888919,0.000000,
2.135531,0.728968,0.825733,1.758378,5.008145,0.210159,0.984618,0.956036,0.921224,0.898360,0.000000,
1.828197,0.585380,0.620402,1.744714,4.909889,0.195852,0.937235,0.922791,0.764421,0.537016,0.000000,
2.216667,0.593653,0.619570,1.676207,4.711502,0.211271,0.965815,0.943595,0.816890,0.517466,0.000000,
1.508621,0.698615,0.669489,1.699076,4.762280,0.189421,0.978403,0.946024,0.973055,0.895269,0.000000,
1.473605,0.524482,0.654900,1.943960,5.710147,0.198164,0.879457,0.847205,0.984897,0.973393,1.000000,
1.270868,0.482949,0.603678,1.967501,6.631967,0.177148,0.823611,0.813726,0.890576,0.874201,0.000000,
1.197628,0.521218,0.666330,1.995936,7.047736,0.178127,0.828767,0.821551,0.709708,0.989560,2.000000,
1.297753,0.856230,0.764021,1.660180,5.559045,0.166580,0.990736,0.949321,0.934245,0.926929,0.000000,
1.362821,0.666582,0.718138,1.817903,5.698286,0.173505,0.901276,0.908847,0.983814,0.866405,0.000000,
1.104428,0.571802,0.696165,1.953317,6.335911,0.168342,0.945187,0.819691,0.864992,0.871195,0.000000,
1.011597,0.518988,0.728851,2.100432,7.154174,0.162180,0.925038,0.767491,0.939297,0.951506,0.000000,
1.012630,0.671486,0.729414,1.847289,6.117841,0.166130,0.943043,0.889510,0.714874,0.700620,0.000000,
1.038264,0.800976,0.767393,1.734593,5.880467,0.162595,0.972998,0.939516,0.797375,0.821516,0.000000,
1.045351,0.369013,0.510122,2.083457,5.737855,0.223021,0.648754,0.849450,0.827833,0.832346,2.000000,
1.139918,0.391741,0.551447,2.098444,7.104990,0.181704,0.742663,0.760946,0.879888,0.965719,4.000000,
1.199874,0.265075,0.432185,2.253852,7.293919,0.219148,0.589104,0.728163,0.915692,0.982550,3.000000,
1.107506,0.229608,0.438876,2.447295,8.475520,0.224986,0.601567,0.653738,0.837786,0.807239,2.000000,
1.256878,0.269519,0.589176,2.603579,8.994436,0.192230,0.767333,0.617503,0.451740,0.970928,3.000000,
1.139654,0.150300,0.374515,2.791924,9.996925,0.205049,0.483499,0.580849,0.352427,0.852394,4.000000);

	//leafDataVariance
	//leafDataVariance = (cv::Mat_<double>(1,11)<<)

	//typeNum
	typeNum = 32;

	//thresh
	thresh = 0.05;

}

LeafClassifier::~LeafClassifier() {
	// TODO Auto-generated destructor stub
}

size_t LeafClassifier::Predict(float *feature) {
	double probability[32];

	double *dataPtr;
//	double *varPtr;

#ifdef DEBUG
	for(int i = 0; i< 11; i++) {
		printf("the feature %d is %f\n",i,feature[i]);
	}

#endif
//	varPtr = leafVar.ptr<double>(0);

	for(int i = 0; i < leafData.rows; ++i) {
		dataPtr = leafData.ptr<double>(i);
		probability[i] = 1;
		double p = 0;
#ifdef DEBUG
			printf("in row %d\n",i);
#endif
		for(int j = 0; j < (leafData.cols-1); ++j) {
			if(feature[j] < dataPtr[j]) {
				p = exp((feature[j]-dataPtr[j])/(0.2*dataPtr[j]));
			}else {
				p = exp((dataPtr[j]-feature[j])/(0.2*dataPtr[j]));
			}
#ifdef DEBUG
			printf("data %d is %f\n",j,(float)dataPtr[j]);
			printf("feature %d is %f\n",j,(float)feature[j]);
			printf("the p is %f \n", (float)p);
#endif
			probability[i] = probability[i]* p;
		}
		p = exp(-abs(feature[10]-dataPtr[10]));
		probability[i] *= p;
#ifdef DEBUG
			printf("the probability %d is %f\n\n",i, (float)probability[i]);
#endif
	}

	int maxIndex = 0;
	for(int i = 1; i < typeNum; ++i) {
		if(probability[i] > probability[maxIndex]) {
			maxIndex = i;
		}
	}

	//
	if(probability[maxIndex] < thresh) {
		maxIndex = -1;
	}

	return maxIndex+1;
}

